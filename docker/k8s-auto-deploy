#!/bin/bash

usage() { echo "usage $0 -f <config-file> [-t timeout (Default 20 seconds)]" 2>&1; exit 1; }

[ -z $1 ] && usage

while getopts ":f:t:" o; do
  case "${o}" in
    f)
      CONFIG=${OPTARG}
      ;;
    t) 
      TIMEOUT=${OPTARG}
      ;;
    *)
      usage
      ;;
  esac
done

[ -z ${TIMEOUT} ] && TIMEOUT=20

[ -f ${CONFIG} ] || echo "Config file: ${CONFIG} not in path"
[ -f ${CONFIG} ] || exit 1

echo "deploying..."
echo "executing: kubectl apply -f ${CONFIG} --record"
kubectl apply -f ${CONFIG} --record

# Check to see if config is json - if so get the value
DEPLOY_NAME=$(cat ${CONFIG} | jq '.metadata.name' 2>/dev/null | sed 's/"//g;')

# Config is not json - results in empty string as the value
if [ "${DEPLOY_NAME}" = "" ]; then

  # READ IN CONFIG FILE to find name of deployment
  # This should be in metadata: , name: value
  METADATA=""
  NAME=""

# Try is as yaml 
  while read -r line
  do
    [[ $line == *"metadata:"* ]] && METADATA=true
    [[ $line == *"name:"* ]]  && NAME=true
    [ -n "${METADATA}" ] && [ -n "${NAME}" ] && DEPLOY_NAME=$(echo $line | awk '{print $NF}')
    [ -n "${METADATA}" ] && [ -n "${NAME}" ] && break
  done < "${CONFIG}"
fi

echo "checking deployment: ${DEPLOY_NAME}"

if [ "${DEPLOY_NAME}" = "" ]; then
  echo "unable to get deployment name, able to check status"
  exit 0
else
  STATUS=1
  for (( i = 1; i <= ${TIMEOUT}; i++ ))
  do
    sleep 1
    ROLLOUT_STATUS=$(kubectl rollout status deployments ${DEPLOY_NAME} --watch=false)
    [[ ${ROLLOUT_STATUS} == *"Waiting for rollout to finish:"* ]] && STATUS=1
    [[ ${ROLLOUT_STATUS} == *"successfully rolled out"* ]] && STATUS=0
    [ $STATUS -eq 0 ] && break
    echo -n .
  done
fi
echo
echo ${ROLLOUT_STATUS}

if [ $STATUS -ne 0 ]; then
  echo "Rolling back ${DEPLOY_NAME}"
  kubectl rollout undo deployment/${DEPLOY_NAME}
fi


exit $STATUS
